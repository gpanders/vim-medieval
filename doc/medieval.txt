*medieval.txt*  Evaluate Markdown code blocks in Vim

Author:  Gregory Anders <greg@gpanders.com>
Repo:    https://github.com/gpanders/vim-medieval
License: Same terms as Vim itself (see |license|)

						*:EvalBlock* *medieval*

Medieval allows you to evaluate code blocks in Markdown buffers of the
following form:
>
	```bash
	echo "Hello world!"
	```
<
By placing your cursor anywhere in the code block above and running
|:EvalBlock|, Medieval will open the result of evaluating the block in the
|preview-window| (in this case, it will contain the text "Hello world!")

You can also redirect the output of the evaluation into a register using
|:EvalBlock| @{0-9a-z".=*+}.

							*medieval-target*
You can also send the output of evaluation into another code block, allowing
you to do a primitive style of literate programming. You can accomplish this
by adding a "target" parameter to your code block and creating a second code
block with a "name" parameter. The output of the evaluation of your code block
will be redirected to the targeted block. For example:
>
	<!-- target: squares -->
	```python
	print([x*x for x in range(5)])
	```

	<!-- name: squares -->
	```
	```
<
If you run |:EvalBlock| in the first code block, the second block will become
>
	<!-- name: squares -->
	```
	[0, 1, 4, 9, 16]
	```
<
The target of a block can also be a file. If the target name contains a "/"
character, it is assumed to be a file path. File paths can contain environment
variables and tilde expansion. Example:
>
	<!-- target: $HOME/squares.txt -->
	```python
	print([x*x for x in range(5)])
	```
<
Note that the following will write to a code block named "squares.txt" (and
create it if it doesn't exist) instead of writing to a file called
"squares.txt":
>
	<!-- target: squares.txt -->

To write to a file called "squares.txt", use: >

	<!-- target: ./squares.txt -->
<
You can manually specify a target block using |:EvalBlock| {target}. With
[!], |:EvalBlock| will cause the evaluated code block to replace its own
contents with the result of its evaluation:
>
	```sh
	fortune
	```
<
After |:EvalBlock!|:
>
	```sh
	The difference between art and science is that science is what we
	understand well enough to explain to a computer.  Art is everything else.
	                -- Donald Knuth, "Discover"
	```
<
The language of the block being executed is detected through the text next to
the opening code fence (known as the "info string"). There is no formal
specification for how the info string should be formatted; however, Medieval
can detect info strings in any of the following formats:
>
	```lang
	```

	```{.lang}
	```

	```{lang}
	```
<
Whitespace is allowed before the info string. The closing "}" is not required
for the latter two styles, meaning you can use info strings such as
>
	``` {.python .numberLines #my-id}
	```
<
Note, however, that when using this kind of info string the language name must
be first for Medieval to correctly detect it.

The target block can be either another code block (delimited by "```" or
"~~~") or a LaTeX math block (delimited by "$$"):
>
	<!-- target: math -->
	```python
	print(r"\text{Hello LaTeX!}")
	```

	<!-- name: math -->
	$$
	$$
<
							*medieval-labels*

By default, the block labels must be of the form "<!-- {option}: {value}[,]
[{option}: {value}[,] [...]]" where {option} is one of "name", "target",
"require", or "tangle". The label can be preceeded by whitespace, but no other
characters. The option values can be composed of the following characters:
"0-9A-Za-z_+.$#&/-". Note that the closing tag of the HTML comment is not
required. This allows you to embed the code block within an HTML block comment
so that the block will not be rendered in the final output. For example:
>
	<!-- target: example
	```sh
	echo '$ ls -1'
	ls -1
	```
	-->

	<!-- name: example -->
	```sh
	$ ls -1
	LICENSE
	README.md
	after
	autoload
	doc
	```
<
In this example, only the second block will be rendered, since the first block
is nested within an HTML comment.

The label pattern can be changed on a per-filetype basis, if needed. See
|g:medieval_option_pat|.

							*medieval-require*

Code blocks can be combined using the "require" option. The argument to the
"require" option is the name of another code block which will be evaluated
before the contents of the block itself. Required blocks must use the same
language as the requiring block.

For example,
>
	<!-- name: numpy -->
	```python
	import numpy as np
	```

	<!-- target: output, require: numpy -->
	```python
	print(np.arange(1, 5))
	```

	<!-- name: output -->
	```
	```
<
Running |:EvalBlock| in the second code block produces:
>
	<!-- name: output -->
	```
	[1 2 3 4]
	```
<
Blocks can have recursive dependencies:
>
	<!-- name: first_name -->
	```sh
	first_name="Gregory"
	```

	<!-- name: full_name, require: first_name -->
	```sh
	full_name="$first_name Anders"
	```

	<!-- target: greeting, require: full_name -->
	```sh
	echo "Hi, my name is $full_name"
	```
<
After running :EvalBlock in the block above...
>
	<!-- name: greeting -->
	```
	Hi, my name is Gregory Anders
	```
<
							*medieval-tangle*
The source code in a code block can be written to a given file before
executing by using the "tangle" option. This can be used in conjunction with
the "require" keyword to combine multiple blocks together into a single
combined source file.

Example:
>
	<!-- name: numpy -->
	```python
	import numpy as np
	```

	<!-- require: numpy tangle: script.py -->
	```python
	x = np.arange(5)
	print(x)
	```
<
When you run |:EvalBlock| on the second code block above, a new file called
"script.py" will be generated in your current working directory with the
contents
>
	import numpy as np
	x = np.arange(5)
	print(x)
<
Note that the value of the "tangle" option is always interpreted as the name
of a file, regardless of whether or not it contains a / character.

If you only wish to use the tangling feature without printing the output
of the code block, you can use `/dev/null` as the block target:
>
	<!-- target: /dev/null tangle: script.py -->
<
							*medieval#eval()*
medieval#eval({target}[, {opts})
		Evaluate the block under the cursor. To replace the contents of
		the block (like |:EvalBlock!|) use "self" for {target}. If
		{target} is |v:null| or an empty string then it uses the
		"target" field from the block header |medieval-target| if it
		exists; otherwise, output is written to the |preview-window|.

		{opts} is an optional |Dict| accepting the following keys:
		  setup:	(function) A function to be called just before
				evaluating the code block. The function
				accepts two arguments: a "context" |Dict|
				containing the parameters used to evaluate the
				block (such as the start and end line number
				of the block) and the text withing the block
				as a list of lines. Modifications to the block
				text will affect what is evaluated.
		  complete:	(function) A function to be called when
				evaluation completes, before the output is
				written to the target block. The function
				accepts two arguments: a "context" |Dict|
				containing the parameters used to evaluate the
				block and the result of the block evaluation
				as a list of lines. Modifications to the
				output list will affect what is written to the
				target block.
		  after:	(function) A function to be called when
				evaluation completes, but after the output is
				written to the target block. The function
				accepts two arguments: a "context" |Dict|
				containing the parameters used to evaluate the
				block and the result of the block evaluation
				as a list of lines.

		Example: >

			function! s:complete(ctx, output)
			    let elapsed = reltimestr(reltime(a:ctx.start_time))
			    call add(a:output, 'Evaluation finished in ' . elapsed . 's')
			endfunction

			function! s:setup(ctx, input)
			    let a:ctx.start_time = reltime()
			endfunction

			function! s:after(ctx, input)
			    echo "Target has been updated."
			endfunction

			call medieval#eval('',
				\ #{setup: function('s:setup'),
				\   complete: function('s:complete'),
				\   after: function('s:after')})
<
							*g:medieval_langs*
Medieval will only attempt to execute code blocks in languages explicitly
listed in the variable |g:medieval_langs|. The structure of this variable is a
list of strings corresponding to whitelisted languages that can be
interpreted. If a language's interpreter has a different name than the
language itself, you can use the form "{lang}={interpreter}" to specify what
interpreter should be used.

For example, to allow Medieval to run Python, Ruby, and shell scripts, use
>
	let g:medieval_langs = ['python=python3', 'ruby', 'sh', 'console=bash']
<
By default, |g:medieval_langs| is empty, so you must specify this variable
yourself.

							*g:medieval_fences*
You can define custom code fence delimiters using the variable
|g:medieval_fences|. This variable is a |List| of |Dict|s containing a "start"
key that defines a pattern for the opening delimiter of the code block and an
optional "end" key that defines a pattern for the closing delimiter of the
code block. If "end" is omitted, then the closing delimiter is assumed to be
the same as the opening delimiter.

For example, to use a block of the following form:
>
	<!-- name: katex -->
	{{< katex >}}
	{{< /katex >}}
<
You can set |g:medieval_fences| to
>
	let g:medieval_fences = [{
		\ 'start': '{{<\s\+\(\S\+\)\s\+>}}',
		\ 'end': '{{<\s\+/\1\s\+>}}',
		\ }]
<
Note the use of a capture group in the "start" pattern and the use of "\1" in
the end pattern. The "\1" in the end pattern will be replaced by whatever
matches the capture group in the "start" pattern ("katex" in our example
above).

						*g:medieval_option_pat*
Medieval finds labeled blocks using an "option pattern". The default is
"^\s*<!--\s*" which matches HTML comments as described in this document. This
pattern can be overriden on a per-filetype basis by adding entries to the
|g:medieval_option_pat| variable. Example: >

	let g:medieval_option_pat = {}
	let g:medieval_option_pat.vimwiki = '^%%\s*'
<
						*g:medieval_option_fmt*
When Medieval creates a new block it will insert an option label
automatically. By default, the label will be "<!-- name: {name} -->", but this
can be overridden on a per-filetype basis by setting the
|g:medieval_option_fmt| variable. This variable is a |Dict| mapping filetype
to a |printf()| style pattern. Example: >

	let g:medieval_option_fmt = {}
	let g:medieval_option_fmt.vimwiki = '%%%% %s'
<
This example will instead insert "%% name: {name}" for new blocks. Note that
in the example above, the "%" characters are escaped with a 2nd "%" character.

 vim:tw=78:ts=8:noet:ft=help:norl:
